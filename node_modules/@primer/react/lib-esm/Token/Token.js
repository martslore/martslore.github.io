function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { get } from '../constants';
import sx from '../sx';
import TokenBase, { defaultTokenSize, isTokenInteractive } from './TokenBase';
import RemoveTokenButton from './_RemoveTokenButton';
import TokenTextContainer from './_TokenTextContainer';
const tokenBorderWidthPx = 1;
const DefaultTokenStyled = styled(TokenBase).withConfig({
  displayName: "Token__DefaultTokenStyled",
  componentId: "sc-kue8wa-0"
})(["background-color:", ";border-color:", ";border-style:solid;border-width:", "px;color:", ";max-width:100%;padding-right:", ";position:relative;", " ", ""], get('colors.neutral.subtle'), props => props.isSelected ? get('colors.fg.default') : get('colors.border.subtle'), tokenBorderWidthPx, props => props.isSelected ? get('colors.fg.default') : get('colors.fg.muted'), props => !props.hideRemoveButton ? 0 : undefined, sx, props => {
  if (props.isTokenInteractive) {
    return css(["&:hover{background-color:", ";box-shadow:", ";color:", ";}"], get('colors.neutral.muted'), get('colors.shadow.medium'), get('colors.fg.default'));
  }
});
const LeadingVisualContainer = styled('span').withConfig({
  displayName: "Token__LeadingVisualContainer",
  componentId: "sc-kue8wa-1"
})(["flex-shrink:0;line-height:0;", ""], props => {
  switch (props.size) {
    case 'large':
    case 'extralarge':
      return css(["margin-right:", ";"], get('space.2'));

    default:
      return css(["margin-right:", ";"], get('space.1'));
  }
});
const Token = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  const {
    as,
    onRemove,
    id,
    leadingVisual: LeadingVisual,
    text,
    size,
    hideRemoveButton,
    href,
    onClick,
    ...rest
  } = props;
  const hasMultipleActionTargets = isTokenInteractive(props) && Boolean(onRemove) && !hideRemoveButton;

  const onRemoveClick = e => {
    e.stopPropagation();
    onRemove && onRemove();
  };

  const interactiveTokenProps = {
    as,
    href,
    onClick
  };
  return /*#__PURE__*/React.createElement(DefaultTokenStyled, _extends({
    onRemove: onRemove,
    hideRemoveButton: hideRemoveButton || !onRemove,
    id: id === null || id === void 0 ? void 0 : id.toString(),
    text: text,
    size: size,
    isTokenInteractive: isTokenInteractive(props)
  }, !hasMultipleActionTargets ? interactiveTokenProps : {}, rest, {
    ref: forwardedRef
  }), LeadingVisual ? /*#__PURE__*/React.createElement(LeadingVisualContainer, {
    size: size
  }, /*#__PURE__*/React.createElement(LeadingVisual, null)) : null, /*#__PURE__*/React.createElement(TokenTextContainer, hasMultipleActionTargets ? interactiveTokenProps : {}, text), !hideRemoveButton && onRemove ? /*#__PURE__*/React.createElement(RemoveTokenButton, {
    borderOffset: tokenBorderWidthPx,
    onClick: onRemoveClick,
    size: size,
    isParentInteractive: isTokenInteractive(props),
    "aria-hidden": hasMultipleActionTargets ? 'true' : 'false',
    sx: hasMultipleActionTargets ? {
      position: 'relative',
      zIndex: '1'
    } : {}
  }) : null);
});
Token.displayName = 'Token';
Token.defaultProps = {
  size: defaultTokenSize
};
export default Token;