/// <reference types="react" />
export type { ListProps as ActionListProps } from './List';
export type { GroupProps } from './Group';
export type { ItemProps } from './Item';
export type { DescriptionProps } from './Description';
export type { LeadingVisualProps, TrailingVisualProps } from './Visuals';
/**
 * Collection of list-related components.
 */
export declare const ActionList: import("@radix-ui/react-polymorphic").ForwardRefComponent<"ul", import("./List").ListProps> & {
    /** Collects related `Items` in an `ActionList`. */
    Group: import("react").FC<import("./Group").GroupProps>;
    /** An actionable or selectable `Item` */
    Item: import("@radix-ui/react-polymorphic").ForwardRefComponent<"li", import("./Item").ItemProps>;
    /** A `Item` that renders a full-size anchor inside ListItem */
    LinkItem: import("@radix-ui/react-polymorphic").ForwardRefComponent<"a", Pick<import("./Item").ItemProps, "children" | "sx"> & {
        download?: string | undefined;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        ping?: string | undefined;
        rel?: string | undefined;
        target?: string | undefined;
        type?: string | undefined;
        referrerPolicy?: import("react").HTMLAttributeReferrerPolicy | undefined;
    }>;
    /** Visually separates `Item`s or `Group`s in an `ActionList`. */
    Divider: import("react").FC<import("../sx").SxProp>;
    /** Secondary text which provides additional information about an `Item`. */
    Description: import("react").FC<import("./Description").DescriptionProps>;
    /** Icon (or similar) positioned before `Item` text. */
    LeadingVisual: import("react").FC<import("../sx").SxProp & import("react").HTMLAttributes<HTMLSpanElement>>;
    /** Icon (or similar) positioned after `Item` text. */
    TrailingVisual: import("react").FC<import("../sx").SxProp & import("react").HTMLAttributes<HTMLSpanElement>>;
};
