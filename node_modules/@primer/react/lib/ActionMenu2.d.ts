import React from 'react';
import { AnchoredOverlayProps } from './AnchoredOverlay';
import { OverlayProps } from './Overlay';
import { ButtonProps } from './Button2';
export declare type ActionMenuProps = {
    /**
     * Recommended: `ActionMenu.Button` or `ActionMenu.Anchor` with `ActionMenu.Overlay`
     */
    children: React.ReactElement[] | React.ReactElement;
    /**
     * If defined, will control the open/closed state of the overlay. Must be used in conjunction with `onOpenChange`.
     */
    open?: boolean;
    /**
     * If defined, will control the open/closed state of the overlay. Must be used in conjunction with `open`.
     */
    onOpenChange?: (s: boolean) => void;
} & Pick<AnchoredOverlayProps, 'anchorRef'>;
export declare type MenuAnchorProps = {
    children: React.ReactElement;
};
/** this component is syntactical sugar üç≠ */
export declare type MenuButtonProps = ButtonProps;
declare type MenuOverlayProps = Partial<OverlayProps> & {
    /**
     * Recommended: `ActionList`
     */
    children: React.ReactElement[] | React.ReactElement;
};
export declare const ActionMenu: React.FC<ActionMenuProps> & {
    Button: React.ForwardRefExoticComponent<Pick<ButtonProps, string | number | symbol> & React.RefAttributes<React.RefObject<HTMLElement> | undefined>>;
    Anchor: React.ForwardRefExoticComponent<MenuAnchorProps & React.RefAttributes<React.RefObject<HTMLElement> | undefined>>;
    Overlay: React.FC<MenuOverlayProps>;
    Divider: React.FC<import("./sx").SxProp>;
};
export {};
