{"ast":null,"code":"import React, { useContext } from 'react';\nimport { Autocomplete, Box, Checkbox, Radio, Select, Textarea, TextInput, TextInputWithTokens, useSSRSafeId } from '..';\nimport FormControlCaption from './_FormControlCaption';\nimport FormControlLabel from './_FormControlLabel';\nimport FormControlValidation from './_FormControlValidation';\nimport { Slots } from './slots';\nimport ValidationAnimationContainer from '../_ValidationAnimationContainer';\nimport { get } from '../constants';\nimport FormControlLeadingVisual from './_FormControlLeadingVisual';\nimport CheckboxOrRadioGroupContext from '../_CheckboxOrRadioGroup/_CheckboxOrRadioGroupContext';\n\nconst FormControl = _ref => {\n  let {\n    children,\n    disabled: disabledProp,\n    id: idProp,\n    required,\n    sx\n  } = _ref;\n  const expectedInputComponents = [Autocomplete, Checkbox, Radio, Select, TextInput, TextInputWithTokens, Textarea];\n  const choiceGroupContext = useContext(CheckboxOrRadioGroupContext);\n  const disabled = (choiceGroupContext === null || choiceGroupContext === void 0 ? void 0 : choiceGroupContext.disabled) || disabledProp;\n  const id = useSSRSafeId(idProp);\n  const validationChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControlValidation ? child : null);\n  const captionChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControlCaption ? child : null);\n  const labelChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControlLabel);\n  const validationMessageId = validationChild && `${id}-validationMessage`;\n  const captionId = captionChild && `${id}-caption`;\n  const validationStatus = /*#__PURE__*/React.isValidElement(validationChild) && validationChild.props.variant;\n  const InputComponent = React.Children.toArray(children).find(child => expectedInputComponents.some(inputComponent => /*#__PURE__*/React.isValidElement(child) && child.type === inputComponent));\n  const inputProps = /*#__PURE__*/React.isValidElement(InputComponent) && InputComponent.props;\n  const isChoiceInput = /*#__PURE__*/React.isValidElement(InputComponent) && (InputComponent.type === Checkbox || InputComponent.type === Radio);\n\n  if (!InputComponent) {\n    // eslint-disable-next-line no-console\n    console.warn(`To correctly render this field with the correct ARIA attributes passed to the input, please pass one of the component from @primer/react as a direct child of the FormControl component: ${expectedInputComponents.reduce((acc, componentName) => {\n      acc += `\\n- ${componentName.displayName}`;\n      return acc;\n    }, '')}`, 'If you are using a custom input component, please be sure to follow WCAG guidelines to make your form control accessible.');\n  } else {\n    if (inputProps !== null && inputProps !== void 0 && inputProps.id) {\n      // eslint-disable-next-line no-console\n      console.warn(`instead of passing the 'id' prop directly to the input component, it should be passed to the parent component, <FormControl>`);\n    }\n\n    if (inputProps !== null && inputProps !== void 0 && inputProps.disabled) {\n      // eslint-disable-next-line no-console\n      console.warn(`instead of passing the 'disabled' prop directly to the input component, it should be passed to the parent component, <FormControl>`);\n    }\n\n    if (inputProps !== null && inputProps !== void 0 && inputProps.required) {\n      // eslint-disable-next-line no-console\n      console.warn(`instead of passing the 'required' prop directly to the input component, it should be passed to the parent component, <FormControl>`);\n    }\n  }\n\n  if (!labelChild) {\n    // eslint-disable-next-line no-console\n    console.error(`The input field with the id ${id} MUST have a FormControl.Label child.\\n\\nIf you want to hide the label, pass the 'visuallyHidden' prop to the FormControl.Label component.`);\n  }\n\n  if (isChoiceInput) {\n    if (validationChild) {\n      // eslint-disable-next-line no-console\n      console.warn('Validation messages are not rendered for an individual checkbox or radio. The validation message should be shown for all options.');\n    }\n\n    if (React.Children.toArray(children).find(child => {\n      var _child$props;\n\n      return /*#__PURE__*/React.isValidElement(child) && ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.required);\n    })) {\n      // eslint-disable-next-line no-console\n      console.warn('An individual checkbox or radio cannot be a required field.');\n    }\n  } else {\n    if (React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControlLeadingVisual)) {\n      // eslint-disable-next-line no-console\n      console.warn('A leading visual is only rendered for a checkbox or radio form control. If you want to render a leading visual inside of your input, check if your input supports a leading visual.');\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Slots, {\n    context: {\n      captionId,\n      disabled,\n      id,\n      required,\n      validationMessageId\n    }\n  }, slots => {\n    const isLabelHidden = /*#__PURE__*/React.isValidElement(slots.Label) && slots.Label.props.visuallyHidden;\n    return isChoiceInput ? /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      alignItems: slots.LeadingVisual ? 'center' : undefined,\n      sx: sx\n    }, /*#__PURE__*/React.createElement(Box, {\n      sx: {\n        '> input': {\n          marginLeft: 0,\n          marginRight: 0\n        }\n      }\n    }, /*#__PURE__*/React.isValidElement(InputComponent) && /*#__PURE__*/React.cloneElement(InputComponent, {\n      id,\n      disabled,\n      ['aria-describedby']: captionId\n    }), React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && ![Checkbox, Radio].some(inputComponent => child.type === inputComponent))), slots.LeadingVisual && /*#__PURE__*/React.createElement(Box, {\n      color: disabled ? 'fg.muted' : 'fg.default',\n      sx: {\n        '> *': {\n          minWidth: slots.Caption ? get('fontSizes.4') : get('fontSizes.2'),\n          minHeight: slots.Caption ? get('fontSizes.4') : get('fontSizes.2'),\n          fill: 'currentColor'\n        }\n      },\n      ml: 2\n    }, slots.LeadingVisual), /*#__PURE__*/React.isValidElement(slots.Label) && !slots.Label.props.visuallyHidden || slots.Caption ? /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      ml: 2\n    }, slots.Label, slots.Caption) : /*#__PURE__*/React.createElement(React.Fragment, null, slots.Label, slots.Caption)) : /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: \"100%\",\n      sx: { ...(isLabelHidden ? {\n          '> *:not(label) + *': {\n            marginTop: 2\n          }\n        } : {\n          '> * + *': {\n            marginTop: 2\n          }\n        }),\n        ...sx\n      }\n    }, React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && !expectedInputComponents.some(inputComponent => child.type === inputComponent)), slots.Label, /*#__PURE__*/React.isValidElement(InputComponent) && /*#__PURE__*/React.cloneElement(InputComponent, {\n      id,\n      required,\n      disabled,\n      validationStatus,\n      ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' ')\n    }), validationChild && /*#__PURE__*/React.createElement(ValidationAnimationContainer, {\n      show: true\n    }, slots.Validation), slots.Caption);\n  });\n};\n\nFormControl.displayName = \"FormControl\";\nexport default Object.assign(FormControl, {\n  Caption: FormControlCaption,\n  Label: FormControlLabel,\n  LeadingVisual: FormControlLeadingVisual,\n  Validation: FormControlValidation\n});","map":{"version":3,"sources":["/home/lorenzo/Documenti/Portfolio/node_modules/@primer/react/lib-esm/FormControl/FormControl.js"],"names":["React","useContext","Autocomplete","Box","Checkbox","Radio","Select","Textarea","TextInput","TextInputWithTokens","useSSRSafeId","FormControlCaption","FormControlLabel","FormControlValidation","Slots","ValidationAnimationContainer","get","FormControlLeadingVisual","CheckboxOrRadioGroupContext","FormControl","children","disabled","disabledProp","id","idProp","required","sx","expectedInputComponents","choiceGroupContext","validationChild","Children","toArray","find","child","isValidElement","type","captionChild","labelChild","validationMessageId","captionId","validationStatus","props","variant","InputComponent","some","inputComponent","inputProps","isChoiceInput","console","warn","reduce","acc","componentName","displayName","error","_child$props","createElement","context","slots","isLabelHidden","Label","visuallyHidden","display","alignItems","LeadingVisual","undefined","marginLeft","marginRight","cloneElement","filter","color","minWidth","Caption","minHeight","fill","ml","flexDirection","Fragment","width","marginTop","Boolean","join","show","Validation","Object","assign"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { Autocomplete, Box, Checkbox, Radio, Select, Textarea, TextInput, TextInputWithTokens, useSSRSafeId } from '..';\nimport FormControlCaption from './_FormControlCaption';\nimport FormControlLabel from './_FormControlLabel';\nimport FormControlValidation from './_FormControlValidation';\nimport { Slots } from './slots';\nimport ValidationAnimationContainer from '../_ValidationAnimationContainer';\nimport { get } from '../constants';\nimport FormControlLeadingVisual from './_FormControlLeadingVisual';\nimport CheckboxOrRadioGroupContext from '../_CheckboxOrRadioGroup/_CheckboxOrRadioGroupContext';\n\nconst FormControl = ({\n  children,\n  disabled: disabledProp,\n  id: idProp,\n  required,\n  sx\n}) => {\n  const expectedInputComponents = [Autocomplete, Checkbox, Radio, Select, TextInput, TextInputWithTokens, Textarea];\n  const choiceGroupContext = useContext(CheckboxOrRadioGroupContext);\n  const disabled = (choiceGroupContext === null || choiceGroupContext === void 0 ? void 0 : choiceGroupContext.disabled) || disabledProp;\n  const id = useSSRSafeId(idProp);\n  const validationChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControlValidation ? child : null);\n  const captionChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControlCaption ? child : null);\n  const labelChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControlLabel);\n  const validationMessageId = validationChild && `${id}-validationMessage`;\n  const captionId = captionChild && `${id}-caption`;\n  const validationStatus = /*#__PURE__*/React.isValidElement(validationChild) && validationChild.props.variant;\n  const InputComponent = React.Children.toArray(children).find(child => expectedInputComponents.some(inputComponent => /*#__PURE__*/React.isValidElement(child) && child.type === inputComponent));\n  const inputProps = /*#__PURE__*/React.isValidElement(InputComponent) && InputComponent.props;\n  const isChoiceInput = /*#__PURE__*/React.isValidElement(InputComponent) && (InputComponent.type === Checkbox || InputComponent.type === Radio);\n\n  if (!InputComponent) {\n    // eslint-disable-next-line no-console\n    console.warn(`To correctly render this field with the correct ARIA attributes passed to the input, please pass one of the component from @primer/react as a direct child of the FormControl component: ${expectedInputComponents.reduce((acc, componentName) => {\n      acc += `\\n- ${componentName.displayName}`;\n      return acc;\n    }, '')}`, 'If you are using a custom input component, please be sure to follow WCAG guidelines to make your form control accessible.');\n  } else {\n    if (inputProps !== null && inputProps !== void 0 && inputProps.id) {\n      // eslint-disable-next-line no-console\n      console.warn(`instead of passing the 'id' prop directly to the input component, it should be passed to the parent component, <FormControl>`);\n    }\n\n    if (inputProps !== null && inputProps !== void 0 && inputProps.disabled) {\n      // eslint-disable-next-line no-console\n      console.warn(`instead of passing the 'disabled' prop directly to the input component, it should be passed to the parent component, <FormControl>`);\n    }\n\n    if (inputProps !== null && inputProps !== void 0 && inputProps.required) {\n      // eslint-disable-next-line no-console\n      console.warn(`instead of passing the 'required' prop directly to the input component, it should be passed to the parent component, <FormControl>`);\n    }\n  }\n\n  if (!labelChild) {\n    // eslint-disable-next-line no-console\n    console.error(`The input field with the id ${id} MUST have a FormControl.Label child.\\n\\nIf you want to hide the label, pass the 'visuallyHidden' prop to the FormControl.Label component.`);\n  }\n\n  if (isChoiceInput) {\n    if (validationChild) {\n      // eslint-disable-next-line no-console\n      console.warn('Validation messages are not rendered for an individual checkbox or radio. The validation message should be shown for all options.');\n    }\n\n    if (React.Children.toArray(children).find(child => {\n      var _child$props;\n\n      return /*#__PURE__*/React.isValidElement(child) && ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.required);\n    })) {\n      // eslint-disable-next-line no-console\n      console.warn('An individual checkbox or radio cannot be a required field.');\n    }\n  } else {\n    if (React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControlLeadingVisual)) {\n      // eslint-disable-next-line no-console\n      console.warn('A leading visual is only rendered for a checkbox or radio form control. If you want to render a leading visual inside of your input, check if your input supports a leading visual.');\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Slots, {\n    context: {\n      captionId,\n      disabled,\n      id,\n      required,\n      validationMessageId\n    }\n  }, slots => {\n    const isLabelHidden = /*#__PURE__*/React.isValidElement(slots.Label) && slots.Label.props.visuallyHidden;\n    return isChoiceInput ? /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      alignItems: slots.LeadingVisual ? 'center' : undefined,\n      sx: sx\n    }, /*#__PURE__*/React.createElement(Box, {\n      sx: {\n        '> input': {\n          marginLeft: 0,\n          marginRight: 0\n        }\n      }\n    }, /*#__PURE__*/React.isValidElement(InputComponent) && /*#__PURE__*/React.cloneElement(InputComponent, {\n      id,\n      disabled,\n      ['aria-describedby']: captionId\n    }), React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && ![Checkbox, Radio].some(inputComponent => child.type === inputComponent))), slots.LeadingVisual && /*#__PURE__*/React.createElement(Box, {\n      color: disabled ? 'fg.muted' : 'fg.default',\n      sx: {\n        '> *': {\n          minWidth: slots.Caption ? get('fontSizes.4') : get('fontSizes.2'),\n          minHeight: slots.Caption ? get('fontSizes.4') : get('fontSizes.2'),\n          fill: 'currentColor'\n        }\n      },\n      ml: 2\n    }, slots.LeadingVisual), /*#__PURE__*/React.isValidElement(slots.Label) && !slots.Label.props.visuallyHidden || slots.Caption ? /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      ml: 2\n    }, slots.Label, slots.Caption) : /*#__PURE__*/React.createElement(React.Fragment, null, slots.Label, slots.Caption)) : /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: \"100%\",\n      sx: { ...(isLabelHidden ? {\n          '> *:not(label) + *': {\n            marginTop: 2\n          }\n        } : {\n          '> * + *': {\n            marginTop: 2\n          }\n        }),\n        ...sx\n      }\n    }, React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && !expectedInputComponents.some(inputComponent => child.type === inputComponent)), slots.Label, /*#__PURE__*/React.isValidElement(InputComponent) && /*#__PURE__*/React.cloneElement(InputComponent, {\n      id,\n      required,\n      disabled,\n      validationStatus,\n      ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' ')\n    }), validationChild && /*#__PURE__*/React.createElement(ValidationAnimationContainer, {\n      show: true\n    }, slots.Validation), slots.Caption);\n  });\n};\n\nFormControl.displayName = \"FormControl\";\nexport default Object.assign(FormControl, {\n  Caption: FormControlCaption,\n  Label: FormControlLabel,\n  LeadingVisual: FormControlLeadingVisual,\n  Validation: FormControlValidation\n});"]},"metadata":{},"sourceType":"module"}