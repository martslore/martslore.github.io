{"ast":null,"code":"import React from 'react';\nimport { Box, useSSRSafeId } from '..';\nimport createSlots from '../utils/create-slots';\nimport ValidationAnimationContainer from '../_ValidationAnimationContainer';\nimport InputValidation from '../_InputValidation';\nimport ChoiceFieldsetListItem from './ChoiceFieldsetListItem';\nimport ChoiceFieldsetDescription from './ChoiceFieldsetDescription';\nimport ChoiceFieldsetLegend from './ChoiceFieldsetLegend';\nimport ChoiceFieldsetList from './ChoiceFieldsetList';\nimport ChoiceFieldsetValidation from './ChoiceFieldsetValidation';\nconst {\n  Slots,\n  Slot\n} = createSlots(['Description', 'ChoiceList', 'Legend', 'Validation']);\nexport { Slot };\n/**\n * @deprecated Use `CheckboxGroup` or `RadioGroup` instead.\n */\n\nconst ChoiceFieldset = _ref => {\n  let {\n    children,\n    disabled,\n    id,\n    name,\n    onSelect,\n    required,\n    selected,\n    validationMap,\n    validationResult\n  } = _ref;\n\n  var _React$Children$map;\n\n  const fieldsetId = useSSRSafeId(id);\n  const validationChildren = (_React$Children$map = React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) && child.type === ChoiceFieldsetValidation ? child : null)) === null || _React$Children$map === void 0 ? void 0 : _React$Children$map.filter(Boolean);\n  const validationChildToRender = validationChildren === null || validationChildren === void 0 ? void 0 : validationChildren.find(child => child.props.validationKey === validationResult);\n  const validationMessageId = validationChildToRender ? `${fieldsetId}-validationMsg` : undefined;\n  return /*#__PURE__*/React.createElement(Slots, {\n    context: {\n      disabled,\n      name,\n      onSelect,\n      required,\n      selected,\n      validationMessageId\n    }\n  }, slots => {\n    const isLegendVisible = /*#__PURE__*/React.isValidElement(slots.Legend) && slots.Legend.props.isVisible;\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Box, {\n      as: \"fieldset\",\n      border: \"none\",\n      margin: 0,\n      padding: 0,\n      \"aria-describedby\": [validationMessageId].filter(Boolean).join(' ')\n    }, React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && child.type !== ChoiceFieldsetValidation), /*#__PURE__*/React.createElement(Box, {\n      mb: isLegendVisible ? 3 : undefined\n    }, slots.Legend, slots.Description), slots.ChoiceList), validationChildToRender && /*#__PURE__*/React.createElement(Box, {\n      mt: 3\n    }, validationMap && validationResult && validationMessageId && /*#__PURE__*/React.createElement(ValidationAnimationContainer, {\n      show: true\n    }, /*#__PURE__*/React.createElement(InputValidation, {\n      validationStatus: validationMap[validationResult],\n      id: validationMessageId\n    }, validationChildToRender))));\n  });\n};\n\nChoiceFieldset.displayName = \"ChoiceFieldset\";\nexport default Object.assign(ChoiceFieldset, {\n  Description: ChoiceFieldsetDescription,\n  Item: ChoiceFieldsetListItem,\n  Legend: ChoiceFieldsetLegend,\n  List: ChoiceFieldsetList,\n  Validation: ChoiceFieldsetValidation\n});","map":{"version":3,"sources":["/home/lorenzo/Documenti/Portfolio/node_modules/@primer/react/lib-esm/ChoiceFieldset/ChoiceFieldset.js"],"names":["React","Box","useSSRSafeId","createSlots","ValidationAnimationContainer","InputValidation","ChoiceFieldsetListItem","ChoiceFieldsetDescription","ChoiceFieldsetLegend","ChoiceFieldsetList","ChoiceFieldsetValidation","Slots","Slot","ChoiceFieldset","children","disabled","id","name","onSelect","required","selected","validationMap","validationResult","_React$Children$map","fieldsetId","validationChildren","Children","map","child","isValidElement","type","filter","Boolean","validationChildToRender","find","props","validationKey","validationMessageId","undefined","createElement","context","slots","isLegendVisible","Legend","isVisible","as","border","margin","padding","join","toArray","mb","Description","ChoiceList","mt","show","validationStatus","displayName","Object","assign","Item","List","Validation"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,IAAlC;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,4BAAP,MAAyC,kCAAzC;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,MAAM;AACJC,EAAAA,KADI;AAEJC,EAAAA;AAFI,IAGFT,WAAW,CAAC,CAAC,aAAD,EAAgB,YAAhB,EAA8B,QAA9B,EAAwC,YAAxC,CAAD,CAHf;AAIA,SAASS,IAAT;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,QAUjB;AAAA,MAVkB;AACtBC,IAAAA,QADsB;AAEtBC,IAAAA,QAFsB;AAGtBC,IAAAA,EAHsB;AAItBC,IAAAA,IAJsB;AAKtBC,IAAAA,QALsB;AAMtBC,IAAAA,QANsB;AAOtBC,IAAAA,QAPsB;AAQtBC,IAAAA,aARsB;AAStBC,IAAAA;AATsB,GAUlB;;AACJ,MAAIC,mBAAJ;;AAEA,QAAMC,UAAU,GAAGtB,YAAY,CAACc,EAAD,CAA/B;AACA,QAAMS,kBAAkB,GAAG,CAACF,mBAAmB,GAAGvB,KAAK,CAAC0B,QAAN,CAAeC,GAAf,CAAmBb,QAAnB,EAA6Bc,KAAK,IAAI,aAAa5B,KAAK,CAAC6B,cAAN,CAAqBD,KAArB,KAA+BA,KAAK,CAACE,IAAN,KAAepB,wBAA9C,GAAyEkB,KAAzE,GAAiF,IAApI,CAAvB,MAAsK,IAAtK,IAA8KL,mBAAmB,KAAK,KAAK,CAA3M,GAA+M,KAAK,CAApN,GAAwNA,mBAAmB,CAACQ,MAApB,CAA2BC,OAA3B,CAAnP;AACA,QAAMC,uBAAuB,GAAGR,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,kBAAkB,CAACS,IAAnB,CAAwBN,KAAK,IAAIA,KAAK,CAACO,KAAN,CAAYC,aAAZ,KAA8Bd,gBAA/D,CAAxG;AACA,QAAMe,mBAAmB,GAAGJ,uBAAuB,GAAI,GAAET,UAAW,gBAAjB,GAAmCc,SAAtF;AACA,SAAO,aAAatC,KAAK,CAACuC,aAAN,CAAoB5B,KAApB,EAA2B;AAC7C6B,IAAAA,OAAO,EAAE;AACPzB,MAAAA,QADO;AAEPE,MAAAA,IAFO;AAGPC,MAAAA,QAHO;AAIPC,MAAAA,QAJO;AAKPC,MAAAA,QALO;AAMPiB,MAAAA;AANO;AADoC,GAA3B,EASjBI,KAAK,IAAI;AACV,UAAMC,eAAe,GAAG,aAAa1C,KAAK,CAAC6B,cAAN,CAAqBY,KAAK,CAACE,MAA3B,KAAsCF,KAAK,CAACE,MAAN,CAAaR,KAAb,CAAmBS,SAA9F;AACA,WAAO,aAAa5C,KAAK,CAACuC,aAAN,CAAoB,KAApB,EAA2B,IAA3B,EAAiC,aAAavC,KAAK,CAACuC,aAAN,CAAoBtC,GAApB,EAAyB;AACzF4C,MAAAA,EAAE,EAAE,UADqF;AAEzFC,MAAAA,MAAM,EAAE,MAFiF;AAGzFC,MAAAA,MAAM,EAAE,CAHiF;AAIzFC,MAAAA,OAAO,EAAE,CAJgF;AAKzF,0BAAoB,CAACX,mBAAD,EAAsBN,MAAtB,CAA6BC,OAA7B,EAAsCiB,IAAtC,CAA2C,GAA3C;AALqE,KAAzB,EAM/DjD,KAAK,CAAC0B,QAAN,CAAewB,OAAf,CAAuBpC,QAAvB,EAAiCiB,MAAjC,CAAwCH,KAAK,IAAI,aAAa5B,KAAK,CAAC6B,cAAN,CAAqBD,KAArB,KAA+BA,KAAK,CAACE,IAAN,KAAepB,wBAA5G,CAN+D,EAMwE,aAAaV,KAAK,CAACuC,aAAN,CAAoBtC,GAApB,EAAyB;AAC9KkD,MAAAA,EAAE,EAAET,eAAe,GAAG,CAAH,GAAOJ;AADoJ,KAAzB,EAEpJG,KAAK,CAACE,MAF8I,EAEtIF,KAAK,CAACW,WAFgI,CANrF,EAQ7BX,KAAK,CAACY,UARuB,CAA9C,EAQoCpB,uBAAuB,IAAI,aAAajC,KAAK,CAACuC,aAAN,CAAoBtC,GAApB,EAAyB;AACvHqD,MAAAA,EAAE,EAAE;AADmH,KAAzB,EAE7FjC,aAAa,IAAIC,gBAAjB,IAAqCe,mBAArC,IAA4D,aAAarC,KAAK,CAACuC,aAAN,CAAoBnC,4BAApB,EAAkD;AAC5HmD,MAAAA,IAAI,EAAE;AADsH,KAAlD,EAEzE,aAAavD,KAAK,CAACuC,aAAN,CAAoBlC,eAApB,EAAqC;AACnDmD,MAAAA,gBAAgB,EAAEnC,aAAa,CAACC,gBAAD,CADoB;AAEnDN,MAAAA,EAAE,EAAEqB;AAF+C,KAArC,EAGbJ,uBAHa,CAF4D,CAFoB,CAR5E,CAApB;AAgBD,GA3BmB,CAApB;AA4BD,CA7CD;;AA+CApB,cAAc,CAAC4C,WAAf,GAA6B,gBAA7B;AACA,eAAeC,MAAM,CAACC,MAAP,CAAc9C,cAAd,EAA8B;AAC3CuC,EAAAA,WAAW,EAAE7C,yBAD8B;AAE3CqD,EAAAA,IAAI,EAAEtD,sBAFqC;AAG3CqC,EAAAA,MAAM,EAAEnC,oBAHmC;AAI3CqD,EAAAA,IAAI,EAAEpD,kBAJqC;AAK3CqD,EAAAA,UAAU,EAAEpD;AAL+B,CAA9B,CAAf","sourcesContent":["import React from 'react';\nimport { Box, useSSRSafeId } from '..';\nimport createSlots from '../utils/create-slots';\nimport ValidationAnimationContainer from '../_ValidationAnimationContainer';\nimport InputValidation from '../_InputValidation';\nimport ChoiceFieldsetListItem from './ChoiceFieldsetListItem';\nimport ChoiceFieldsetDescription from './ChoiceFieldsetDescription';\nimport ChoiceFieldsetLegend from './ChoiceFieldsetLegend';\nimport ChoiceFieldsetList from './ChoiceFieldsetList';\nimport ChoiceFieldsetValidation from './ChoiceFieldsetValidation';\nconst {\n  Slots,\n  Slot\n} = createSlots(['Description', 'ChoiceList', 'Legend', 'Validation']);\nexport { Slot };\n/**\n * @deprecated Use `CheckboxGroup` or `RadioGroup` instead.\n */\n\nconst ChoiceFieldset = ({\n  children,\n  disabled,\n  id,\n  name,\n  onSelect,\n  required,\n  selected,\n  validationMap,\n  validationResult\n}) => {\n  var _React$Children$map;\n\n  const fieldsetId = useSSRSafeId(id);\n  const validationChildren = (_React$Children$map = React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) && child.type === ChoiceFieldsetValidation ? child : null)) === null || _React$Children$map === void 0 ? void 0 : _React$Children$map.filter(Boolean);\n  const validationChildToRender = validationChildren === null || validationChildren === void 0 ? void 0 : validationChildren.find(child => child.props.validationKey === validationResult);\n  const validationMessageId = validationChildToRender ? `${fieldsetId}-validationMsg` : undefined;\n  return /*#__PURE__*/React.createElement(Slots, {\n    context: {\n      disabled,\n      name,\n      onSelect,\n      required,\n      selected,\n      validationMessageId\n    }\n  }, slots => {\n    const isLegendVisible = /*#__PURE__*/React.isValidElement(slots.Legend) && slots.Legend.props.isVisible;\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Box, {\n      as: \"fieldset\",\n      border: \"none\",\n      margin: 0,\n      padding: 0,\n      \"aria-describedby\": [validationMessageId].filter(Boolean).join(' ')\n    }, React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && child.type !== ChoiceFieldsetValidation), /*#__PURE__*/React.createElement(Box, {\n      mb: isLegendVisible ? 3 : undefined\n    }, slots.Legend, slots.Description), slots.ChoiceList), validationChildToRender && /*#__PURE__*/React.createElement(Box, {\n      mt: 3\n    }, validationMap && validationResult && validationMessageId && /*#__PURE__*/React.createElement(ValidationAnimationContainer, {\n      show: true\n    }, /*#__PURE__*/React.createElement(InputValidation, {\n      validationStatus: validationMap[validationResult],\n      id: validationMessageId\n    }, validationChildToRender))));\n  });\n};\n\nChoiceFieldset.displayName = \"ChoiceFieldset\";\nexport default Object.assign(ChoiceFieldset, {\n  Description: ChoiceFieldsetDescription,\n  Item: ChoiceFieldsetListItem,\n  Legend: ChoiceFieldsetLegend,\n  List: ChoiceFieldsetList,\n  Validation: ChoiceFieldsetValidation\n});"]},"metadata":{},"sourceType":"module"}