{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Box, Checkbox, FormControl, Radio, useSSRSafeId } from '..';\nimport ValidationAnimationContainer from '../_ValidationAnimationContainer';\nimport CheckboxOrRadioGroupCaption from './_CheckboxOrRadioGroupCaption';\nimport CheckboxOrRadioGroupLabel from './_CheckboxOrRadioGroupLabel';\nimport CheckboxOrRadioGroupValidation from './_CheckboxOrRadioGroupValidation';\nimport { Slots } from './slots';\nimport styled from 'styled-components';\nimport { get } from '../constants';\nimport CheckboxOrRadioGroupContext from './_CheckboxOrRadioGroupContext';\nimport VisuallyHidden from '../_VisuallyHidden';\nconst Body = styled.div.withConfig({\n  displayName: \"CheckboxOrRadioGroup__Body\",\n  componentId: \"sc-1qo75yk-0\"\n})([\"display:flex;flex-direction:column;list-style:none;margin:0;padding:0;> * + *{margin-top:\", \";}\"], get('space.2'));\n\nconst CheckboxOrRadioGroup = _ref => {\n  let {\n    'aria-labelledby': ariaLabelledby,\n    children,\n    disabled,\n    id: idProp,\n    required,\n    sx\n  } = _ref;\n  const expectedInputComponents = [Checkbox, Radio];\n  const labelChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === CheckboxOrRadioGroupLabel);\n  const validationChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === CheckboxOrRadioGroupValidation ? child : null);\n  const captionChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === CheckboxOrRadioGroupCaption ? child : null);\n  const id = useSSRSafeId(idProp);\n  const validationMessageId = validationChild && `${id}-validationMessage`;\n  const captionId = captionChild && `${id}-caption`;\n\n  const checkIfOnlyContainsChoiceInputs = () => {\n    const formControlComponentChildren = React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControl).map(formControlComponent => /*#__PURE__*/React.isValidElement(formControlComponent) ? formControlComponent.props.children : []).flat();\n    return Boolean(React.Children.toArray(formControlComponentChildren).find(child => expectedInputComponents.some(inputComponent => /*#__PURE__*/React.isValidElement(child) && child.type === inputComponent)));\n  };\n\n  if (!checkIfOnlyContainsChoiceInputs()) {\n    // eslint-disable-next-line no-console\n    console.warn('Only `Checkbox` and `Radio` form controls should be used in a `CheckboxOrRadioGroup`.');\n  }\n\n  if (!labelChild && !ariaLabelledby) {\n    // eslint-disable-next-line no-console\n    console.warn('A choice group must be labelled using a `CheckboxOrRadioGroup.Label` child, or by passing `aria-labelledby` to the CheckboxOrRadioGroup component.');\n  }\n\n  return /*#__PURE__*/React.createElement(Slots, {\n    context: {\n      disabled,\n      required,\n      captionId,\n      validationMessageId\n    }\n  }, slots => {\n    const isLegendVisible = /*#__PURE__*/React.isValidElement(labelChild) && !labelChild.props.visuallyHidden;\n    return /*#__PURE__*/React.createElement(CheckboxOrRadioGroupContext.Provider, {\n      value: {\n        disabled\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Box, _extends({\n      border: \"none\",\n      margin: 0,\n      mb: validationChild ? 2 : undefined,\n      padding: 0\n    }, labelChild && {\n      as: 'fieldset',\n      disabled\n    }, {\n      sx: sx\n    }), labelChild ?\n    /*#__PURE__*/\n\n    /*\n      Placing the caption text and validation text in the <legend> provides a better user\n      experience for more screenreaders.\n       Reference: https://blog.tenon.io/accessible-validation-of-checkbox-and-radiobutton-groups/\n    */\n    React.createElement(Box, {\n      as: \"legend\",\n      mb: isLegendVisible ? 2 : undefined,\n      padding: 0\n    }, slots.Label, slots.Caption, /*#__PURE__*/React.isValidElement(slots.Validation) && slots.Validation.props.children && /*#__PURE__*/React.createElement(VisuallyHidden, null, slots.Validation.props.children)) :\n    /*\n      If CheckboxOrRadioGroup.Label wasn't passed as a child, we don't render a <legend> \n      but we still want to render a caption\n    */\n    slots.Caption, /*#__PURE__*/React.createElement(Body, !labelChild && {\n      ['aria-labelledby']: ariaLabelledby,\n      ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' '),\n      as: 'div',\n      role: 'group'\n    }, React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child)))), validationChild && /*#__PURE__*/React.createElement(ValidationAnimationContainer // If we have CheckboxOrRadioGroup.Label as a child, we render a screenreader-accessible validation message in the <legend>\n    , {\n      \"aria-hidden\": Boolean(labelChild),\n      show: true\n    }, slots.Validation)));\n  });\n};\n\nCheckboxOrRadioGroup.displayName = \"CheckboxOrRadioGroup\";\nCheckboxOrRadioGroup.defaultProps = {\n  disabled: false,\n  required: false\n};\nexport default Object.assign(CheckboxOrRadioGroup, {\n  Caption: CheckboxOrRadioGroupCaption,\n  Label: CheckboxOrRadioGroupLabel,\n  Validation: CheckboxOrRadioGroupValidation\n});","map":{"version":3,"sources":["/home/lorenzo/Documenti/Portfolio/node_modules/@primer/react/lib-esm/_CheckboxOrRadioGroup/CheckboxOrRadioGroup.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","Box","Checkbox","FormControl","Radio","useSSRSafeId","ValidationAnimationContainer","CheckboxOrRadioGroupCaption","CheckboxOrRadioGroupLabel","CheckboxOrRadioGroupValidation","Slots","styled","get","CheckboxOrRadioGroupContext","VisuallyHidden","Body","div","withConfig","displayName","componentId","CheckboxOrRadioGroup","ariaLabelledby","children","disabled","id","idProp","required","sx","expectedInputComponents","labelChild","Children","toArray","find","child","isValidElement","type","validationChild","captionChild","validationMessageId","captionId","checkIfOnlyContainsChoiceInputs","formControlComponentChildren","filter","map","formControlComponent","props","flat","Boolean","some","inputComponent","console","warn","createElement","context","slots","isLegendVisible","visuallyHidden","Provider","value","border","margin","mb","undefined","padding","as","Label","Caption","Validation","join","role","show","defaultProps"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { Box, Checkbox, FormControl, Radio, useSSRSafeId } from '..';\nimport ValidationAnimationContainer from '../_ValidationAnimationContainer';\nimport CheckboxOrRadioGroupCaption from './_CheckboxOrRadioGroupCaption';\nimport CheckboxOrRadioGroupLabel from './_CheckboxOrRadioGroupLabel';\nimport CheckboxOrRadioGroupValidation from './_CheckboxOrRadioGroupValidation';\nimport { Slots } from './slots';\nimport styled from 'styled-components';\nimport { get } from '../constants';\nimport CheckboxOrRadioGroupContext from './_CheckboxOrRadioGroupContext';\nimport VisuallyHidden from '../_VisuallyHidden';\nconst Body = styled.div.withConfig({\n  displayName: \"CheckboxOrRadioGroup__Body\",\n  componentId: \"sc-1qo75yk-0\"\n})([\"display:flex;flex-direction:column;list-style:none;margin:0;padding:0;> * + *{margin-top:\", \";}\"], get('space.2'));\n\nconst CheckboxOrRadioGroup = ({\n  'aria-labelledby': ariaLabelledby,\n  children,\n  disabled,\n  id: idProp,\n  required,\n  sx\n}) => {\n  const expectedInputComponents = [Checkbox, Radio];\n  const labelChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === CheckboxOrRadioGroupLabel);\n  const validationChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === CheckboxOrRadioGroupValidation ? child : null);\n  const captionChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === CheckboxOrRadioGroupCaption ? child : null);\n  const id = useSSRSafeId(idProp);\n  const validationMessageId = validationChild && `${id}-validationMessage`;\n  const captionId = captionChild && `${id}-caption`;\n\n  const checkIfOnlyContainsChoiceInputs = () => {\n    const formControlComponentChildren = React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControl).map(formControlComponent => /*#__PURE__*/React.isValidElement(formControlComponent) ? formControlComponent.props.children : []).flat();\n    return Boolean(React.Children.toArray(formControlComponentChildren).find(child => expectedInputComponents.some(inputComponent => /*#__PURE__*/React.isValidElement(child) && child.type === inputComponent)));\n  };\n\n  if (!checkIfOnlyContainsChoiceInputs()) {\n    // eslint-disable-next-line no-console\n    console.warn('Only `Checkbox` and `Radio` form controls should be used in a `CheckboxOrRadioGroup`.');\n  }\n\n  if (!labelChild && !ariaLabelledby) {\n    // eslint-disable-next-line no-console\n    console.warn('A choice group must be labelled using a `CheckboxOrRadioGroup.Label` child, or by passing `aria-labelledby` to the CheckboxOrRadioGroup component.');\n  }\n\n  return /*#__PURE__*/React.createElement(Slots, {\n    context: {\n      disabled,\n      required,\n      captionId,\n      validationMessageId\n    }\n  }, slots => {\n    const isLegendVisible = /*#__PURE__*/React.isValidElement(labelChild) && !labelChild.props.visuallyHidden;\n    return /*#__PURE__*/React.createElement(CheckboxOrRadioGroupContext.Provider, {\n      value: {\n        disabled\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Box, _extends({\n      border: \"none\",\n      margin: 0,\n      mb: validationChild ? 2 : undefined,\n      padding: 0\n    }, labelChild && {\n      as: 'fieldset',\n      disabled\n    }, {\n      sx: sx\n    }), labelChild ?\n    /*#__PURE__*/\n\n    /*\n      Placing the caption text and validation text in the <legend> provides a better user\n      experience for more screenreaders.\n       Reference: https://blog.tenon.io/accessible-validation-of-checkbox-and-radiobutton-groups/\n    */\n    React.createElement(Box, {\n      as: \"legend\",\n      mb: isLegendVisible ? 2 : undefined,\n      padding: 0\n    }, slots.Label, slots.Caption, /*#__PURE__*/React.isValidElement(slots.Validation) && slots.Validation.props.children && /*#__PURE__*/React.createElement(VisuallyHidden, null, slots.Validation.props.children)) :\n    /*\n      If CheckboxOrRadioGroup.Label wasn't passed as a child, we don't render a <legend> \n      but we still want to render a caption\n    */\n    slots.Caption, /*#__PURE__*/React.createElement(Body, !labelChild && {\n      ['aria-labelledby']: ariaLabelledby,\n      ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' '),\n      as: 'div',\n      role: 'group'\n    }, React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child)))), validationChild && /*#__PURE__*/React.createElement(ValidationAnimationContainer // If we have CheckboxOrRadioGroup.Label as a child, we render a screenreader-accessible validation message in the <legend>\n    , {\n      \"aria-hidden\": Boolean(labelChild),\n      show: true\n    }, slots.Validation)));\n  });\n};\n\nCheckboxOrRadioGroup.displayName = \"CheckboxOrRadioGroup\";\nCheckboxOrRadioGroup.defaultProps = {\n  disabled: false,\n  required: false\n};\nexport default Object.assign(CheckboxOrRadioGroup, {\n  Caption: CheckboxOrRadioGroupCaption,\n  Label: CheckboxOrRadioGroupLabel,\n  Validation: CheckboxOrRadioGroupValidation\n});"]},"metadata":{},"sourceType":"module"}