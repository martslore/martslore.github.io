{"ast":null,"code":"import React from 'react';\nimport { iterateFocusableElements } from '@primer/behaviors/utils';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\nexport const TYPEAHEAD_TIMEOUT = 1000;\nexport const useTypeaheadFocus = (open, providedRef) => {\n  const containerRef = useProvidedRefOrCreate(providedRef);\n  React.useEffect(() => {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n    let query = '';\n    let timeout;\n\n    const handler = event => {\n      var _activeElement$textCo; // skip if a TextInput has focus\n\n\n      const activeElement = document.activeElement;\n      if (activeElement.tagName === 'INPUT') return; // skip if used with modifier to preserve shortcuts like ⌘ + F\n\n      const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n      if (hasModifier) return;\n\n      if (query.length && event.code === 'Space') {\n        // prevent the menu from selecting an option\n        event.preventDefault();\n      } // skip if it's not a alphabet key\n      else if (!isAlphabetKey(event)) {\n        query = ''; // reset the typeahead query\n\n        return;\n      }\n\n      query += event.key.toLowerCase(); // if this is a typeahead event, don't propagate outside of menu\n\n      event.stopPropagation(); // reset the query after timeout\n\n      window.clearTimeout(timeout);\n      timeout = window.setTimeout(() => query = '', TYPEAHEAD_TIMEOUT);\n      let elementToFocus;\n      const focusableItems = [...iterateFocusableElements(container)];\n\n      const focusNextMatch = () => {\n        var _elementToFocus;\n\n        const itemsStartingWithKey = focusableItems.filter(item => {\n          var _item$textContent;\n\n          return (_item$textContent = item.textContent) === null || _item$textContent === void 0 ? void 0 : _item$textContent.toLowerCase().trim().startsWith(query);\n        });\n        const currentActiveIndex = itemsStartingWithKey.indexOf(activeElement); // If the last element is already selected, cycle through the list\n\n        if (currentActiveIndex === itemsStartingWithKey.length - 1) {\n          elementToFocus = itemsStartingWithKey[0];\n        } else {\n          elementToFocus = itemsStartingWithKey.find((item, index) => {\n            return index > currentActiveIndex;\n          });\n        }\n\n        (_elementToFocus = elementToFocus) === null || _elementToFocus === void 0 ? void 0 : _elementToFocus.focus();\n      }; // Single character in query: Jump to the next match\n\n\n      if (query.length === 1) return focusNextMatch(); // 2 characters in query but the user is pressing\n      // the same key, jump to the next match\n\n      if (query.length === 2 && query[0] === query[1]) {\n        query = query[0]; // remove the second key\n\n        return focusNextMatch();\n      } // More > 1 characters in query\n      // If active element satisfies the query stay there,\n\n\n      if ((_activeElement$textCo = activeElement.textContent) !== null && _activeElement$textCo !== void 0 && _activeElement$textCo.toLowerCase().startsWith(query)) return; // otherwise move to the next one that does.\n\n      return focusNextMatch();\n    };\n\n    container.addEventListener('keydown', handler);\n    return () => container.removeEventListener('keydown', handler);\n  }, [open, containerRef]);\n\n  const isAlphabetKey = event => {\n    return event.key.length === 1 && /[a-z\\d]/i.test(event.key);\n  };\n\n  return {\n    containerRef\n  };\n};","map":{"version":3,"sources":["/home/lorenzo/Documenti/Portfolio/node_modules/@primer/react/lib-esm/hooks/useTypeaheadFocus.js"],"names":["React","iterateFocusableElements","useProvidedRefOrCreate","TYPEAHEAD_TIMEOUT","useTypeaheadFocus","open","providedRef","containerRef","useEffect","current","container","query","timeout","handler","event","_activeElement$textCo","activeElement","document","tagName","hasModifier","ctrlKey","altKey","metaKey","length","code","preventDefault","isAlphabetKey","key","toLowerCase","stopPropagation","window","clearTimeout","setTimeout","elementToFocus","focusableItems","focusNextMatch","_elementToFocus","itemsStartingWithKey","filter","item","_item$textContent","textContent","trim","startsWith","currentActiveIndex","indexOf","find","index","focus","addEventListener","removeEventListener","test"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { iterateFocusableElements } from '@primer/behaviors/utils';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\nexport const TYPEAHEAD_TIMEOUT = 1000;\nexport const useTypeaheadFocus = (open, providedRef) => {\n  const containerRef = useProvidedRefOrCreate(providedRef);\n  React.useEffect(() => {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n    let query = '';\n    let timeout;\n\n    const handler = event => {\n      var _activeElement$textCo;\n\n      // skip if a TextInput has focus\n      const activeElement = document.activeElement;\n      if (activeElement.tagName === 'INPUT') return; // skip if used with modifier to preserve shortcuts like ⌘ + F\n\n      const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n      if (hasModifier) return;\n\n      if (query.length && event.code === 'Space') {\n        // prevent the menu from selecting an option\n        event.preventDefault();\n      } // skip if it's not a alphabet key\n      else if (!isAlphabetKey(event)) {\n        query = ''; // reset the typeahead query\n\n        return;\n      }\n\n      query += event.key.toLowerCase(); // if this is a typeahead event, don't propagate outside of menu\n\n      event.stopPropagation(); // reset the query after timeout\n\n      window.clearTimeout(timeout);\n      timeout = window.setTimeout(() => query = '', TYPEAHEAD_TIMEOUT);\n      let elementToFocus;\n      const focusableItems = [...iterateFocusableElements(container)];\n\n      const focusNextMatch = () => {\n        var _elementToFocus;\n\n        const itemsStartingWithKey = focusableItems.filter(item => {\n          var _item$textContent;\n\n          return (_item$textContent = item.textContent) === null || _item$textContent === void 0 ? void 0 : _item$textContent.toLowerCase().trim().startsWith(query);\n        });\n        const currentActiveIndex = itemsStartingWithKey.indexOf(activeElement); // If the last element is already selected, cycle through the list\n\n        if (currentActiveIndex === itemsStartingWithKey.length - 1) {\n          elementToFocus = itemsStartingWithKey[0];\n        } else {\n          elementToFocus = itemsStartingWithKey.find((item, index) => {\n            return index > currentActiveIndex;\n          });\n        }\n\n        (_elementToFocus = elementToFocus) === null || _elementToFocus === void 0 ? void 0 : _elementToFocus.focus();\n      }; // Single character in query: Jump to the next match\n\n\n      if (query.length === 1) return focusNextMatch(); // 2 characters in query but the user is pressing\n      // the same key, jump to the next match\n\n      if (query.length === 2 && query[0] === query[1]) {\n        query = query[0]; // remove the second key\n\n        return focusNextMatch();\n      } // More > 1 characters in query\n      // If active element satisfies the query stay there,\n\n\n      if ((_activeElement$textCo = activeElement.textContent) !== null && _activeElement$textCo !== void 0 && _activeElement$textCo.toLowerCase().startsWith(query)) return; // otherwise move to the next one that does.\n\n      return focusNextMatch();\n    };\n\n    container.addEventListener('keydown', handler);\n    return () => container.removeEventListener('keydown', handler);\n  }, [open, containerRef]);\n\n  const isAlphabetKey = event => {\n    return event.key.length === 1 && /[a-z\\d]/i.test(event.key);\n  };\n\n  return {\n    containerRef\n  };\n};"]},"metadata":{},"sourceType":"module"}