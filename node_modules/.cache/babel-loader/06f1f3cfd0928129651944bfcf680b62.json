{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\nimport { useSSRSafeId } from '..';\nimport { get } from '../constants';\nimport { Slot } from './ChoiceFieldset';\nimport ChoiceFieldsetListContext from './ChoiceFieldsetListContext';\nconst List = styled.ul.withConfig({\n  displayName: \"ChoiceFieldsetList__List\",\n  componentId: \"sc-19gvlgg-0\"\n})([\"display:flex;flex-direction:column;list-style:none;margin:0;padding:0;> li + li{margin-top:\", \";}\"], get('space.2'));\n\nconst getSelectedCheckboxes = (value, checked, selectedValues, selectionVariant) => {\n  if (checked) {\n    return selectionVariant === 'multiple' ? [...selectedValues, value] : [value];\n  }\n\n  return selectedValues.filter(selectedValue => selectedValue !== value);\n};\n\nconst ChoiceFieldsetList = _ref => {\n  let {\n    selectionVariant,\n    children\n  } = _ref;\n  const ssrSafeUniqueName = useSSRSafeId();\n  return /*#__PURE__*/React.createElement(Slot, {\n    name: \"ChoiceList\"\n  }, _ref2 => {\n    let {\n      name,\n      onSelect,\n      disabled,\n      selected = []\n    } = _ref2;\n    return /*#__PURE__*/React.createElement(ChoiceFieldsetListContext.Provider, {\n      value: {\n        disabled,\n        selected,\n        name: name || ssrSafeUniqueName,\n        onChange: e => {\n          const updatedSelections = getSelectedCheckboxes(e.currentTarget.value, e.currentTarget.checked, selected, selectionVariant);\n          onSelect && onSelect(updatedSelections);\n        },\n        selectionVariant\n      }\n    }, /*#__PURE__*/React.createElement(List, null, React.Children.map(children, (child, i) => /*#__PURE__*/React.createElement(\"li\", {\n      key: i\n    }, child))));\n  });\n};\n\nChoiceFieldsetList.displayName = \"ChoiceFieldsetList\";\nChoiceFieldsetList.defaultProps = {\n  selectionVariant: 'single'\n};\nexport default ChoiceFieldsetList;","map":{"version":3,"sources":["/home/lorenzo/Documenti/Portfolio/node_modules/@primer/react/lib-esm/ChoiceFieldset/ChoiceFieldsetList.js"],"names":["React","styled","useSSRSafeId","get","Slot","ChoiceFieldsetListContext","List","ul","withConfig","displayName","componentId","getSelectedCheckboxes","value","checked","selectedValues","selectionVariant","filter","selectedValue","ChoiceFieldsetList","children","ssrSafeUniqueName","createElement","name","onSelect","disabled","selected","Provider","onChange","e","updatedSelections","currentTarget","Children","map","child","i","key","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,IAA7B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,MAAMC,IAAI,GAAGL,MAAM,CAACM,EAAP,CAAUC,UAAV,CAAqB;AAChCC,EAAAA,WAAW,EAAE,0BADmB;AAEhCC,EAAAA,WAAW,EAAE;AAFmB,CAArB,EAGV,CAAC,6FAAD,EAAgG,IAAhG,CAHU,EAG6FP,GAAG,CAAC,SAAD,CAHhG,CAAb;;AAKA,MAAMQ,qBAAqB,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiBC,cAAjB,EAAiCC,gBAAjC,KAAsD;AAClF,MAAIF,OAAJ,EAAa;AACX,WAAOE,gBAAgB,KAAK,UAArB,GAAkC,CAAC,GAAGD,cAAJ,EAAoBF,KAApB,CAAlC,GAA+D,CAACA,KAAD,CAAtE;AACD;;AAED,SAAOE,cAAc,CAACE,MAAf,CAAsBC,aAAa,IAAIA,aAAa,KAAKL,KAAzD,CAAP;AACD,CAND;;AAQA,MAAMM,kBAAkB,GAAG,QAGrB;AAAA,MAHsB;AAC1BH,IAAAA,gBAD0B;AAE1BI,IAAAA;AAF0B,GAGtB;AACJ,QAAMC,iBAAiB,GAAGlB,YAAY,EAAtC;AACA,SAAO,aAAaF,KAAK,CAACqB,aAAN,CAAoBjB,IAApB,EAA0B;AAC5CkB,IAAAA,IAAI,EAAE;AADsC,GAA1B,EAEjB,SAKG;AAAA,QALF;AACFA,MAAAA,IADE;AAEFC,MAAAA,QAFE;AAGFC,MAAAA,QAHE;AAIFC,MAAAA,QAAQ,GAAG;AAJT,KAKE;AACJ,WAAO,aAAazB,KAAK,CAACqB,aAAN,CAAoBhB,yBAAyB,CAACqB,QAA9C,EAAwD;AAC1Ed,MAAAA,KAAK,EAAE;AACLY,QAAAA,QADK;AAELC,QAAAA,QAFK;AAGLH,QAAAA,IAAI,EAAEA,IAAI,IAAIF,iBAHT;AAILO,QAAAA,QAAQ,EAAEC,CAAC,IAAI;AACb,gBAAMC,iBAAiB,GAAGlB,qBAAqB,CAACiB,CAAC,CAACE,aAAF,CAAgBlB,KAAjB,EAAwBgB,CAAC,CAACE,aAAF,CAAgBjB,OAAxC,EAAiDY,QAAjD,EAA2DV,gBAA3D,CAA/C;AACAQ,UAAAA,QAAQ,IAAIA,QAAQ,CAACM,iBAAD,CAApB;AACD,SAPI;AAQLd,QAAAA;AARK;AADmE,KAAxD,EAWjB,aAAaf,KAAK,CAACqB,aAAN,CAAoBf,IAApB,EAA0B,IAA1B,EAAgCN,KAAK,CAAC+B,QAAN,CAAeC,GAAf,CAAmBb,QAAnB,EAA6B,CAACc,KAAD,EAAQC,CAAR,KAAc,aAAalC,KAAK,CAACqB,aAAN,CAAoB,IAApB,EAA0B;AAChIc,MAAAA,GAAG,EAAED;AAD2H,KAA1B,EAErGD,KAFqG,CAAxD,CAAhC,CAXI,CAApB;AAcD,GAtBmB,CAApB;AAuBD,CA5BD;;AA8BAf,kBAAkB,CAACT,WAAnB,GAAiC,oBAAjC;AACAS,kBAAkB,CAACkB,YAAnB,GAAkC;AAChCrB,EAAAA,gBAAgB,EAAE;AADc,CAAlC;AAGA,eAAeG,kBAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useSSRSafeId } from '..';\nimport { get } from '../constants';\nimport { Slot } from './ChoiceFieldset';\nimport ChoiceFieldsetListContext from './ChoiceFieldsetListContext';\nconst List = styled.ul.withConfig({\n  displayName: \"ChoiceFieldsetList__List\",\n  componentId: \"sc-19gvlgg-0\"\n})([\"display:flex;flex-direction:column;list-style:none;margin:0;padding:0;> li + li{margin-top:\", \";}\"], get('space.2'));\n\nconst getSelectedCheckboxes = (value, checked, selectedValues, selectionVariant) => {\n  if (checked) {\n    return selectionVariant === 'multiple' ? [...selectedValues, value] : [value];\n  }\n\n  return selectedValues.filter(selectedValue => selectedValue !== value);\n};\n\nconst ChoiceFieldsetList = ({\n  selectionVariant,\n  children\n}) => {\n  const ssrSafeUniqueName = useSSRSafeId();\n  return /*#__PURE__*/React.createElement(Slot, {\n    name: \"ChoiceList\"\n  }, ({\n    name,\n    onSelect,\n    disabled,\n    selected = []\n  }) => {\n    return /*#__PURE__*/React.createElement(ChoiceFieldsetListContext.Provider, {\n      value: {\n        disabled,\n        selected,\n        name: name || ssrSafeUniqueName,\n        onChange: e => {\n          const updatedSelections = getSelectedCheckboxes(e.currentTarget.value, e.currentTarget.checked, selected, selectionVariant);\n          onSelect && onSelect(updatedSelections);\n        },\n        selectionVariant\n      }\n    }, /*#__PURE__*/React.createElement(List, null, React.Children.map(children, (child, i) => /*#__PURE__*/React.createElement(\"li\", {\n      key: i\n    }, child))));\n  });\n};\n\nChoiceFieldsetList.displayName = \"ChoiceFieldsetList\";\nChoiceFieldsetList.defaultProps = {\n  selectionVariant: 'single'\n};\nexport default ChoiceFieldsetList;"]},"metadata":{},"sourceType":"module"}