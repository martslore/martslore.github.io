{"ast":null,"code":"import { useEffect, useCallback } from 'react'; // adapted from details-menu web component https://github.com/github/details-menu-element\n\nfunction useKeyboardNav(details, open, setOpen) {\n  const handleKeyDown = useCallback(event => {\n    const closeDetails = () => {\n      setOpen(false);\n      const summary = details.current.querySelector('summary');\n      if (summary) summary.focus();\n    };\n\n    const openDetails = () => {\n      setOpen(true);\n    };\n\n    const focusItem = next => {\n      const options = Array.from(details.current.querySelectorAll('[role^=\"menuitem\"]:not([hidden]):not([disabled]):not([aria-disabled=\"true\"])'));\n      const selected = document.activeElement;\n      const index = options.indexOf(selected);\n      const found = next ? options[index + 1] : options[index - 1];\n      const def = next ? options[0] : options[options.length - 1];\n      return found || def;\n    };\n\n    const isMenuItem = el => {\n      const role = el.getAttribute('role');\n      return role === 'menuitem' || role === 'menuitemcheckbox' || role === 'menuitemradio';\n    };\n\n    if (!(event instanceof KeyboardEvent)) return;\n    const isSummaryFocused = event.target instanceof Element && event.target.tagName === 'SUMMARY';\n\n    switch (event.key) {\n      case 'Escape':\n        if (open) {\n          closeDetails(details);\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        break;\n\n      case 'ArrowDown':\n        {\n          if (isSummaryFocused && !open) {\n            openDetails(details);\n          }\n\n          const target = focusItem(true);\n          if (target) target.focus();\n          event.preventDefault();\n        }\n        break;\n\n      case 'ArrowUp':\n        {\n          if (isSummaryFocused && !open) {\n            openDetails();\n          }\n\n          const target = focusItem(false);\n          if (target) target.focus();\n          event.preventDefault();\n        }\n        break;\n\n      case ' ':\n      case 'Enter':\n        {\n          const selected = document.activeElement;\n\n          if (selected && isMenuItem(selected) && selected.closest('details') === details) {\n            event.preventDefault();\n            event.stopPropagation();\n            selected.click();\n          }\n        }\n        break;\n\n      default:\n    }\n  }, [details, open, setOpen]);\n  useEffect(() => {\n    const current = details.current;\n    if (!current) return;\n    current.addEventListener('keydown', handleKeyDown);\n    return () => {\n      current.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [details, handleKeyDown]);\n}\n\nexport default useKeyboardNav;","map":{"version":3,"sources":["/home/lorenzo/Documenti/Portfolio/node_modules/@primer/react/lib-esm/SelectMenu/hooks/useKeyboardNav.js"],"names":["useEffect","useCallback","useKeyboardNav","details","open","setOpen","handleKeyDown","event","closeDetails","summary","current","querySelector","focus","openDetails","focusItem","next","options","Array","from","querySelectorAll","selected","document","activeElement","index","indexOf","found","def","length","isMenuItem","el","role","getAttribute","KeyboardEvent","isSummaryFocused","target","Element","tagName","key","preventDefault","stopPropagation","closest","click","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { useEffect, useCallback } from 'react'; // adapted from details-menu web component https://github.com/github/details-menu-element\n\nfunction useKeyboardNav(details, open, setOpen) {\n  const handleKeyDown = useCallback(event => {\n    const closeDetails = () => {\n      setOpen(false);\n      const summary = details.current.querySelector('summary');\n      if (summary) summary.focus();\n    };\n\n    const openDetails = () => {\n      setOpen(true);\n    };\n\n    const focusItem = next => {\n      const options = Array.from(details.current.querySelectorAll('[role^=\"menuitem\"]:not([hidden]):not([disabled]):not([aria-disabled=\"true\"])'));\n      const selected = document.activeElement;\n      const index = options.indexOf(selected);\n      const found = next ? options[index + 1] : options[index - 1];\n      const def = next ? options[0] : options[options.length - 1];\n      return found || def;\n    };\n\n    const isMenuItem = el => {\n      const role = el.getAttribute('role');\n      return role === 'menuitem' || role === 'menuitemcheckbox' || role === 'menuitemradio';\n    };\n\n    if (!(event instanceof KeyboardEvent)) return;\n    const isSummaryFocused = event.target instanceof Element && event.target.tagName === 'SUMMARY';\n\n    switch (event.key) {\n      case 'Escape':\n        if (open) {\n          closeDetails(details);\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        break;\n\n      case 'ArrowDown':\n        {\n          if (isSummaryFocused && !open) {\n            openDetails(details);\n          }\n\n          const target = focusItem(true);\n          if (target) target.focus();\n          event.preventDefault();\n        }\n        break;\n\n      case 'ArrowUp':\n        {\n          if (isSummaryFocused && !open) {\n            openDetails();\n          }\n\n          const target = focusItem(false);\n          if (target) target.focus();\n          event.preventDefault();\n        }\n        break;\n\n      case ' ':\n      case 'Enter':\n        {\n          const selected = document.activeElement;\n\n          if (selected && isMenuItem(selected) && selected.closest('details') === details) {\n            event.preventDefault();\n            event.stopPropagation();\n            selected.click();\n          }\n        }\n        break;\n\n      default:\n    }\n  }, [details, open, setOpen]);\n  useEffect(() => {\n    const current = details.current;\n    if (!current) return;\n    current.addEventListener('keydown', handleKeyDown);\n    return () => {\n      current.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [details, handleKeyDown]);\n}\n\nexport default useKeyboardNav;"]},"metadata":{},"sourceType":"module"}