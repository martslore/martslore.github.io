{"ast":null,"code":"import React, { useContext } from 'react';\nimport { Checkbox, ChoiceInputField, Radio, useSSRSafeId } from '..';\nimport ChoiceInputLeadingVisual from '../_ChoiceInputLeadingVisual';\nimport ChoiceFieldCaption from './ChoiceFieldCaption';\nimport ChoiceFieldLabel from './ChoiceFieldLabel';\nimport ChoiceFieldsetListContext from './ChoiceFieldsetListContext';\n\nconst ChoiceFieldsetListItem = _ref => {\n  let {\n    children,\n    id,\n    disabled: disabledProp,\n    value\n  } = _ref;\n  const choiceFieldsetListContext = useContext(ChoiceFieldsetListContext);\n\n  if (choiceFieldsetListContext === null) {\n    throw new Error('ChoiceFieldsetListContext returned null');\n  }\n\n  const {\n    name,\n    onChange,\n    selected,\n    disabled,\n    selectionVariant\n  } = choiceFieldsetListContext;\n  const fieldId = useSSRSafeId(id);\n  const labelChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === ChoiceFieldLabel);\n  const otherValidChildren = React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && (child.type === ChoiceFieldCaption || child.type === ChoiceInputLeadingVisual));\n  const ChoiceInput = selectionVariant === 'multiple' ? Checkbox : Radio;\n  return /*#__PURE__*/React.createElement(ChoiceInputField, {\n    id: fieldId,\n    disabled: disabledProp || disabled\n  }, /*#__PURE__*/React.createElement(ChoiceInput, {\n    checked: selected === null || selected === void 0 ? void 0 : selected.includes(value),\n    value: value,\n    name: selectionVariant === 'multiple' ? value : name,\n    onChange: onChange\n  }), labelChild ? // if <Item.Label> was passed, we can just render the children as-is\n  children :\n  /*#__PURE__*/\n  // if <Item.Label> was NOT passed, treat all the children except <Item.Caption> and <Item.LeadingVisual> as the label\n  React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChoiceInputField.Label, null, children), otherValidChildren));\n};\n\nChoiceFieldsetListItem.displayName = \"ChoiceFieldsetListItem\";\nexport default Object.assign(ChoiceFieldsetListItem, {\n  Caption: ChoiceFieldCaption,\n  Label: ChoiceFieldLabel,\n  LeadingVisual: ChoiceInputLeadingVisual\n});","map":{"version":3,"sources":["/home/lorenzo/Documenti/Portfolio/node_modules/@primer/react/lib-esm/ChoiceFieldset/ChoiceFieldsetListItem.js"],"names":["React","useContext","Checkbox","ChoiceInputField","Radio","useSSRSafeId","ChoiceInputLeadingVisual","ChoiceFieldCaption","ChoiceFieldLabel","ChoiceFieldsetListContext","ChoiceFieldsetListItem","children","id","disabled","disabledProp","value","choiceFieldsetListContext","Error","name","onChange","selected","selectionVariant","fieldId","labelChild","Children","toArray","find","child","isValidElement","type","otherValidChildren","filter","ChoiceInput","createElement","checked","includes","Fragment","Label","displayName","Object","assign","Caption","LeadingVisual"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,gBAAnB,EAAqCC,KAArC,EAA4CC,YAA5C,QAAgE,IAAhE;AACA,OAAOC,wBAAP,MAAqC,8BAArC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;;AAEA,MAAMC,sBAAsB,GAAG,QAKzB;AAAA,MAL0B;AAC9BC,IAAAA,QAD8B;AAE9BC,IAAAA,EAF8B;AAG9BC,IAAAA,QAAQ,EAAEC,YAHoB;AAI9BC,IAAAA;AAJ8B,GAK1B;AACJ,QAAMC,yBAAyB,GAAGf,UAAU,CAACQ,yBAAD,CAA5C;;AAEA,MAAIO,yBAAyB,KAAK,IAAlC,EAAwC;AACtC,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,QAHI;AAIJP,IAAAA,QAJI;AAKJQ,IAAAA;AALI,MAMFL,yBANJ;AAOA,QAAMM,OAAO,GAAGjB,YAAY,CAACO,EAAD,CAA5B;AACA,QAAMW,UAAU,GAAGvB,KAAK,CAACwB,QAAN,CAAeC,OAAf,CAAuBd,QAAvB,EAAiCe,IAAjC,CAAsCC,KAAK,IAAI,aAAa3B,KAAK,CAAC4B,cAAN,CAAqBD,KAArB,KAA+BA,KAAK,CAACE,IAAN,KAAerB,gBAA1G,CAAnB;AACA,QAAMsB,kBAAkB,GAAG9B,KAAK,CAACwB,QAAN,CAAeC,OAAf,CAAuBd,QAAvB,EAAiCoB,MAAjC,CAAwCJ,KAAK,IAAI,aAAa3B,KAAK,CAAC4B,cAAN,CAAqBD,KAArB,MAAgCA,KAAK,CAACE,IAAN,KAAetB,kBAAf,IAAqCoB,KAAK,CAACE,IAAN,KAAevB,wBAApF,CAA9D,CAA3B;AACA,QAAM0B,WAAW,GAAGX,gBAAgB,KAAK,UAArB,GAAkCnB,QAAlC,GAA6CE,KAAjE;AACA,SAAO,aAAaJ,KAAK,CAACiC,aAAN,CAAoB9B,gBAApB,EAAsC;AACxDS,IAAAA,EAAE,EAAEU,OADoD;AAExDT,IAAAA,QAAQ,EAAEC,YAAY,IAAID;AAF8B,GAAtC,EAGjB,aAAab,KAAK,CAACiC,aAAN,CAAoBD,WAApB,EAAiC;AAC/CE,IAAAA,OAAO,EAAEd,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACe,QAAT,CAAkBpB,KAAlB,CADd;AAE/CA,IAAAA,KAAK,EAAEA,KAFwC;AAG/CG,IAAAA,IAAI,EAAEG,gBAAgB,KAAK,UAArB,GAAkCN,KAAlC,GAA0CG,IAHD;AAI/CC,IAAAA,QAAQ,EAAEA;AAJqC,GAAjC,CAHI,EAQhBI,UAAU,GAAG;AACjBZ,EAAAA,QADc;AAEd;AACA;AACAX,EAAAA,KAAK,CAACiC,aAAN,CAAoBjC,KAAK,CAACoC,QAA1B,EAAoC,IAApC,EAA0C,aAAapC,KAAK,CAACiC,aAAN,CAAoB9B,gBAAgB,CAACkC,KAArC,EAA4C,IAA5C,EAAkD1B,QAAlD,CAAvD,EAAoHmB,kBAApH,CAZoB,CAApB;AAaD,CApCD;;AAsCApB,sBAAsB,CAAC4B,WAAvB,GAAqC,wBAArC;AACA,eAAeC,MAAM,CAACC,MAAP,CAAc9B,sBAAd,EAAsC;AACnD+B,EAAAA,OAAO,EAAElC,kBAD0C;AAEnD8B,EAAAA,KAAK,EAAE7B,gBAF4C;AAGnDkC,EAAAA,aAAa,EAAEpC;AAHoC,CAAtC,CAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { Checkbox, ChoiceInputField, Radio, useSSRSafeId } from '..';\nimport ChoiceInputLeadingVisual from '../_ChoiceInputLeadingVisual';\nimport ChoiceFieldCaption from './ChoiceFieldCaption';\nimport ChoiceFieldLabel from './ChoiceFieldLabel';\nimport ChoiceFieldsetListContext from './ChoiceFieldsetListContext';\n\nconst ChoiceFieldsetListItem = ({\n  children,\n  id,\n  disabled: disabledProp,\n  value\n}) => {\n  const choiceFieldsetListContext = useContext(ChoiceFieldsetListContext);\n\n  if (choiceFieldsetListContext === null) {\n    throw new Error('ChoiceFieldsetListContext returned null');\n  }\n\n  const {\n    name,\n    onChange,\n    selected,\n    disabled,\n    selectionVariant\n  } = choiceFieldsetListContext;\n  const fieldId = useSSRSafeId(id);\n  const labelChild = React.Children.toArray(children).find(child => /*#__PURE__*/React.isValidElement(child) && child.type === ChoiceFieldLabel);\n  const otherValidChildren = React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && (child.type === ChoiceFieldCaption || child.type === ChoiceInputLeadingVisual));\n  const ChoiceInput = selectionVariant === 'multiple' ? Checkbox : Radio;\n  return /*#__PURE__*/React.createElement(ChoiceInputField, {\n    id: fieldId,\n    disabled: disabledProp || disabled\n  }, /*#__PURE__*/React.createElement(ChoiceInput, {\n    checked: selected === null || selected === void 0 ? void 0 : selected.includes(value),\n    value: value,\n    name: selectionVariant === 'multiple' ? value : name,\n    onChange: onChange\n  }), labelChild ? // if <Item.Label> was passed, we can just render the children as-is\n  children :\n  /*#__PURE__*/\n  // if <Item.Label> was NOT passed, treat all the children except <Item.Caption> and <Item.LeadingVisual> as the label\n  React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChoiceInputField.Label, null, children), otherValidChildren));\n};\n\nChoiceFieldsetListItem.displayName = \"ChoiceFieldsetListItem\";\nexport default Object.assign(ChoiceFieldsetListItem, {\n  Caption: ChoiceFieldCaption,\n  Label: ChoiceFieldLabel,\n  LeadingVisual: ChoiceInputLeadingVisual\n});"]},"metadata":{},"sourceType":"module"}